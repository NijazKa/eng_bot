from pyexpat.errors import messages
import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

import requests
from config import TOKEN
import sql
from sql import session
from functions import random_word, target_translate, new_word

TOKEN = TOKEN
state_storage = StateMemoryStorage()
bot = TeleBot(TOKEN)



class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    wait_for_new_word = State()
    wait_for_translation = State()
    wait_for_delete = State()


@bot.message_handler(commands=['start'])
def send_hello(message):
    user_id = message.chat.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name if message.from_user.last_name else ""
    username = message.from_user.username if message.from_user.username else ""
    full_name = f"{first_name} {last_name}".strip()

    if session.query(sql.User).filter(sql.User.tg_id == user_id).all():
        bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º")
        print(f"User ID: {user_id}, Name: {full_name}, Username: @{username}")
    else:
        user = sql.User(tg_id=user_id, name=first_name)
        session.add(user)
        session.commit()
        bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –î–∞–≤–∞–π —É—á–∏—Ç—å—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    create_word_cards(message)


def create_word_cards(message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è /start –∏ NEXT)"""
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(row_width=2)

    # –û–î–ò–ù –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    random_id = random.randint(1027, 2006)
    wrong_attempts = session.query(sql.UserWord).filter(sql.UserWord.word_id == random_id).first()
    if wrong_attempts and wrong_attempts.wrong_attempts > 3:
        random_id = random.randint(1027, 2006)
    word_data = target_translate(id=random_id)
    target_word = word_data.eng_word
    translate = word_data.translation

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_word(user_id, word_data.id)

    # –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    buttons = []

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)

    others = random_word()
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)

    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–∞–ª—å—à–µ ‚è≠"""
    create_word_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.set_state(message.from_user.id, MyStates.wait_for_new_word, message.chat.id)


@bot.message_handler(state=MyStates.wait_for_new_word)
def get_russian_word(message):
    russian_word = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_russian_word'] = russian_word

    bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{russian_word}':")
    bot.set_state(message.from_user.id, MyStates.wait_for_translation, message.chat.id)


@bot.message_handler(state=MyStates.wait_for_translation)
def get_english_translation(message):
    """–ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"""
    english_word = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        russian_word = data['new_russian_word']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.chat.id
    description = requests.get(f'https://api.dictionaryapi.dev/api/v2/entries/en/{english_word}')
    try:
        desc_text = description.json()[0]['meanings'][-1]['definitions'][0]['example']
    except:
        try:
            desc_text = description.json()[0]['meanings'][0]['definitions'][0]['example']
        except:
            try:
                desc_text = description.json()[0]['meanings'][1]['definitions'][0]['example']
            except:
                try:
                    desc_text = description.json()[0]['meanings'][2]['definitions'][0]['example']
                except:
                    desc_text = '–Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤'
    new_word = sql.UserWord(user_id=user_id, eng_word=english_word, translatioin=russian_word, example_usage=desc_text)
    session.add(new_word)
    session.commit()

    bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{russian_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{english_word}'!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    bot.delete_state(message.from_user.id, message.chat.id)
    create_word_cards(message)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"""
    bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞\n –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.set_state(message.from_user.id, MyStates.wait_for_delete, message.chat.id)

@bot.message_handler(state=MyStates.wait_for_delete)
def delete_word(message):
    delete_word = message.text.strip()
    session.query(sql.UserWord).filter(sql.UserWord.translation == delete_word).delete()
    session.commit()

    bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{delete_word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    bot.delete_state(message.from_user.id, message.chat.id)
    create_word_cards(message)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    if message.text in [Command.NEXT, Command.ADD_WORD, Command.DELETE_WORD]:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        translate_word = data['translate_word']

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == target_word:
        word_id = session.query(sql.Word).filter(sql.Word.eng_word == target_word).first()
        session.query(sql.UserWord).filter(sql.UserWord.word_id == word_id.id).update({'wrong_attempts': sql.UserWord.wrong_attempts + 1},
            synchronize_session=False)
        session.commit()
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {target_word}")

    # –ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—É NEXT –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ '–î–∞–ª—å—à–µ ‚è≠' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞")


if __name__ == '__main__':
    bot.polling()